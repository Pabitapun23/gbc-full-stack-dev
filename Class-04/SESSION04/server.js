const express = require("express");
const app = express();
const HTTP_PORT = process.env.PORT || 8080;
const path = require("path");

app.use(express.urlencoded({ extended: true }));

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

// to receive
//
app.get("/select/:language", (req, res) => {
  if (req.params === undefined) {
    console.log(`no URL parameters sent to server`);
  } else {
    console.log(`URL params: ${JSON.stringify(req.params)}`);
    console.log(`URL Param language: ${req.params.language}`);
  }

  res.send(`Language selected: ${req.params.language}`);
});

/* example: choose a currency
http://localhost:8080/tourism/CAD
http://localhost:8080/tourism/USD
http://localhost:8080/tourism/EUR
*/
app.get("/tourism/:currency", (req, res) => {
  console.log(`req.params: ${req.params}`);

  if (req.params.currency === "CAD") {
    res.send("Showing values in Canadian dollars");
  } else if (req.params.currency === "USD") {
    res.send("Showing values in United States dollars");
  } else if (req.params.currency === "EUR") {
    res.send("Showing values in Euros");
  }
});

/* 
example: endpoint with more than 1 query parameters

e.g.
http://localhost:8080/products/shoes/82947
http://localhost:8080/products/shirts/74839
http://localhost:8080/products/pants/71930
*/
app.get("/products/:category/:productId", (req, res) => {
  res.send(
    `Selected Product Information: ID: ${req.params.productId}, Category: ${req.params.category}`
  );
});

/*
POST request with parameters
*/
app.post("/course/:courseCode", (req, res) => {
  if (req.body !== undefined) {
    const studName = req.body.studentName;
    const course = req.params.courseCode;

    if (course === "mads4007") {
      res.send(`${studName} added to Web Development course`);
    } else if (course === "mads4012") {
      res.send(`${studName} added to Full Stack Development course`);
    } else {
      res.send(`ERROR: course code unknown`);
    }
  }
});

/*
Task:
1. Create a get endpoint "/class-roster"; send the response as with dynamic HTML generated by server
   The HTML response should show a table with all information about the students available in the list

   2. For each row in the table, provide a form to allow to update the grade for respective student, and 
   a submit button,

   3. Each form action attribute should redirect to server endpoint "/update"
      For example, form action for first student should be action=“/update/G101”
   
   4. Create a post endpoint "/update/:stuId" which gets student ID as request parameter

   5. The update endpoint should check if the student with given stuId is present in the array.
      If yes, update the grade with the input value received with req.body. Show the response that the grade has been updated.
        Alternatively, you can redirect user to same after updatin the table with new data
      If no, send the response to the user to inform the same.

    Add new student
6. Create another endpoint or additional HTML elemnts on class-roster endpoint to allow the user enter new student details
7. the provided details should be added to existing student list
8. Once the new object is added, redirect the user to class-roster route
Delete the student
9. modify the response from class-roster to add a button to delete the respective student
10. delete the student object for matching studId from the array
11. show success message to user, redirect to the class-roster route
*/

let studentList = [
  { studId: "G101", studName: "Adam", grade: 100 },
  { studId: "G102", studName: "Mila", grade: 80 },
  { studId: "G103", studName: "Oscar", grade: 75 },
  { studId: "G104", studName: "Andres", grade: 92 },
];

app.get("/class-roster", (req, res) => {
  let output = `
        <h1 style="text-align:center;">Class Roster</h1>
        <table style="border: 1px solid gray; border-radius:10px; padding: 30px; margin: 0 auto;">
           <tr>
            <th>Student ID</th>
            <th>Student Name</th>
            <th>Grade</th>
            <th>Update Grade</th>
            <th></th>
            <br>
           </tr>
           `;

  for (student of studentList) {
    output += `<tr>
              <td>${student.studId}</td>
              <td>${student.studName}</td>
              <td>${student.grade}</td>
              <td>
                <form action="/update/${student.studId}" method="post" style="margin:10px 0;">
                   <input type="number" name="updatedGrade" placeholder="Enter updated grade">
                   <button type="submit">Update Grade</button>
                </form>
              </td>
              <td>
                <form action="/delete/${student.studId}" method="post" style="margin:10px 0;">
                   <button type="submit">Delete Student</button>
                </form>
              </td>
            </tr>`;
  }
  output += `</table><br>
            <h2 style="text-align:center;">Add Student</h2>
            <form action="/add" method="post" style="border: 1px solid gray; border-radius:10px; padding: 20px; margin: 0 auto; width:30%; display: flex;
            flex-direction:column; justify-content:center;">
                <label for="studId">Student ID: </label> <br>
                <input type="text" name="studId" placeholder="Enter Student Id" style="width: 100%; padding: 8px 10px;">
                <br>
                <label for="studName">Student Name: </label> <br>
                <input type="text" name="studName" placeholder="Enter Student Name" style="width: 100%; padding: 8px 10px;">
                <br>
                <label for="grade">Grade: </label> <br>
                <input type="text" name="grade" placeholder="Enter student name" style="width: 100%; padding: 8px 10px;">
                <br>
               
                <button type="submit" style="padding:5px 20px; margin: 0 auto;">Add</button>
            </form>
        `;

  res.send(output);
});

//updates student's grade
app.post("/update/:studId", (req, res) => {
  if (req.body !== undefined) {
    const updatedGrade = req.body.updatedGrade;
    const studId = req.params.studId;

    for (student of studentList) {
      if (student.studId === studId) {
        student.grade = updatedGrade;
        res.redirect("/class-roster");
      }
    }
  }
});

//add new student into array
app.post("/add", (req, res) => {
  if (req.body !== undefined) {
    const studentId = req.body.studId;
    const studentName = req.body.studName;
    const studentGrade = req.body.grade;

    studentList.push({
      studId: studentId,
      studName: studentName,
      grade: studentGrade,
    });
    res.redirect("/class-roster");
  }
});

//deletes student data
// app.post("/delete/:studId", (req, res) => {
//   if (req.body !== undefined) {
//     const studentId = req.body.studId;
//     const studentName = req.body.studName;
//     const studentGrade = req.body.grade;

//     //Remove student from student list array
//     studentList.pop({
//       studId: studentId,
//       studName: studentName,
//       grade: studentGrade,
//     });
//     res.redirect("/class-roster");
//   }
// });

app.post("/delete/:studId", (req, res) => {
  if (req.body !== undefined){
      const studId = req.params.studId;

      for(let i = 0; i < studentList.length; i++){
          if (studentList[i].studId === studId){

              studentList.splice(i, 1)

              //res.redirect() to navigate the user to another endpoint of the server
              res.redirect("/class-roster")
          }
      }
  }
})

const onHttpStart = () => {
  console.log(`The web server has started at http://localhost:${HTTP_PORT}`);
  console.log("Press Ctrl + C to stop the server.");
};

app.listen(HTTP_PORT, onHttpStart);

/* 
   Parts of URL 

   http://www.example.com:8000/page/1?tag=functional#intro
    http://www.example.com:8000/page/1?language=en

   protocol: HTTP or HTTPS (HTTPSecured)
   host: www.example.com
   port: 8000
   path: /page/1
   ? : query parameters
   query : tag=functional
   fragment of HTML page: #intro

*/
